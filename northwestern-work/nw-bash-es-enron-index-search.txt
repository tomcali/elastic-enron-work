# we have elasticsearch running on localhost port 9200
# and we have defined the index scheme for enron with data type email
# we have completed bulk data input files 

# while in terminal application, we can search the enron index email documents
# to find, for example, all those with the exact word "silverpeak" in the body
# and to show the top ten matching documents in a pretty format
curl 'localhost:9200/enron/email/_search?pretty' -d '{
  "query": {
    "match": {
      "body": "silverpeak"
    }
  }      
}'  

# alternatively we could search all fields of the email documents
curl 'localhost:9200/enron/email/_search?pretty' -d '{
  "query": {
    "match": {
      "_all": "silverpeak"
    }
  }      
}' 

# show the number of documents that have "silverpeak"
# across the body or Subject fields 
curl 'localhost:9200/enron/email/_count?pretty' -d '{
  "query": {
    "multi_match": {
      "fields": ["body", "Subject"],
      "query": "silverpeak"
    }
  }      
}' 

# a fuzzy query will accept slight misspellings of the search word
# let's see how many documents satisfy a fuzzy search on "silverpeak"
# across the body or Subject fields 
curl 'localhost:9200/enron/email/_count?pretty' -d '{
  "query": {
    "multi_match": {
      "fields": ["body", "Subject"],
      "query": "silverpeak",
      "fuzziness": "AUTO"
    }
  }      
}' 

















--------------------------------------------
THE REST OF THIS NEEDS WORK


# a fuzzy query will accept slight misspellings of the search word
# let's see how many documents satisfy a fuzzy search on "silverpeak"
# across the body or Subject fields 

Let's run the query but return only the document source identifiers for these seventeen e-mails:

curl 'localhost:9200/enron/email/_search?pretty&size=20&_source' -d '{
  "query": {
    "multi_match": {
      "fields": ["body", "Subject"],
      "query": "silverpeak",
      "fuzziness": "AUTO"
    }
  }      
}' 



curl 'localhost:9200/_cat/plugins'



# Let's add an additional term to the list using a Boolean (either-or/should) search and route the results to a separate file for subsequent analysis. We create and locate ourselves in a new enron-results directory for storing an initial file of results. 

mkdir enron-results
cd enron-results
touch enron-results.txt

curl 'localhost:9200/enron/email/_count?pretty' -d '{
  "query": {
    "bool": {
      "should": [
         {"multi_match": {
           "fields": ["body", "Subject"],
            "query": "silverpeak",
            "fuzziness": "AUTO"
            }
         },  
        {"multi_match": {
           "fields": ["body", "Subject"],
            "query": "california brownout",
            "fuzziness": "AUTO"
            }
         }
         ]
       }
     }    
   }
 }'  | my-results.txt 
 
 
         
         
         
         
         
         
         
           

            
            
    }

      "query": "silverpeak",
      "fuzziness": "AUTO"
    }
  }      
}' 







# We can use aggregations to explore the Enron E-Mail Archive. Suppose we want to identify the top twenty e-mail users in terms of the number of e-mail messages that they sent: &search_type=count

curl 'localhost:9200/enron/email/?pretty' -d '{
  "size": 10,
    "aggregations" : {
      "top-senders" : {
        "terms" : {
          "field": "X-From",
          "order": {
            "_term": "desc"
          }  
        }
      }
    }
  }'      





